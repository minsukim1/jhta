--1. 모든 직원들의 모든 업무아이디를 조회하기
SELECT JOB_ID
FROM EMPLOYEES;
--2. 급여를 12,000달러 이상 받는 직원의 이름과 급여를 조회하기
SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY >= 12000;
--3. 직원번호가 176번 직원과 같은 부서에서 근무하는 직원의 아이디와 이름 직종아이디를 조회하기
SELECT B.EMPLOYEE_ID, B.FIRST_NAME, B.JOB_ID
FROM EMPLOYEES A, EMPLOYEES B
WHERE A.EMPLOYEE_ID = 176
AND A.DEPARTMENT_ID = B.DEPARTMENT_ID;
--4. 급여를 12,000달러 이상 15,000달러 이하 받는 직원들의 직원 아이디와 이름과 급여를 조회하기
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY BETWEEN 12000 AND 15000;
--5. 2005년 1월 1일부터 2000년 6월 30일 사이에 입사한 직원의 아이디, 이름, 업무아이디, 입사일을 조회하기
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, HIRE_DATE
FROM EMPLOYEES
WHERE HIRE_DATE BETWEEN '2005/01/01' AND '2005/06/30'
ORDER BY HIRE_DATE;
--6. 급여가 5,000달러와 12,000달러 사이이고, 부서번호가 20 또는 50인 직원의 이름과 급여를 조회하기
SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY BETWEEN 5000 AND 12000
AND DEPARTMENT_ID IN(20,50);
--7. 관리자가 없는 직원의 이름과 업무아이디를 조회하기
SELECT FIRST_NAME, JOB_ID
FROM EMPLOYEES
WHERE MANAGER_ID IS NULL;
--8. 커미션을 받는 모든 직원의 이름과 급여, 커미션을 급여 및 커미션의 내림차순으로 정렬해서 조회하기
SELECT FIRST_NAME, SALARY, COMMISSION_PCT
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL
ORDER BY SALARY DESC, COMMISSION_PCT DESC;
--9. 이름의 2번째 글자가 e인 모든 직원의 이름을 조회하기
SELECT FIRST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '_e%';
--10. 업무아이디가 ST_CLERK 또는 SA_REP이고 급여를 2,500달러, 3,500달러, 7,000달러 받는 모든 직원의 이름과 업무아이디, 급여를 조회하기
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE JOB_ID IN('ST_CLERK','SA_REP')
AND SALARY IN (2500,3500,7000);
--11. 모든 직원의 이름과 입사일, 근무 개월 수를 계산하여 조회하기, 근무개월 수는 정수로 반올림하고, 근무개월수를 기준으로 오름차순으로 정렬하기
SELECT FIRST_NAME, HIRE_DATE, ROUND(MONTHS_BETWEEN(SYSDATE,HIRE_DATE)) AS 개월
FROM EMPLOYEES
ORDER BY 개월;
--12. 직원의 이름과 커미션을 조회하기, 커미션을 받지 않는 직원은 '없음'으로 표시하기
SELECT FIRST_NAME, NVL(TO_CHAR(COMMISSION_PCT),'없음')
FROM EMPLOYEES;
--13. 모든 직원의 이름, 부서번호, 부서이름을 조회하기
SELECT A.FIRST_NAME, B.DEPARTMENT_ID, B.DEPARTMENT_NAME
FROM EMPLOYEES A, DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID(+);
--14. 80번부서에 소속된 직원의 이름과 업무아이디, 업무제목, 부서이름을 조회하기
SELECT A.FIRST_NAME, B.JOB_ID, B.JOB_TITLE,C.DEPARTMENT_NAME
FROM EMPLOYEES A, JOBS B, DEPARTMENTS C
WHERE A.DEPARTMENT_ID = 80
AND A.DEPARTMENT_ID = C.DEPARTMENT_ID
AND A.JOB_ID = B.JOB_ID;
--15. 커미션을 받는 모든 직원의 이름과 업무아이디, 업무제목, 부서이름, 부서소재지 도시명을 조회하기
SELECT A.FIRST_NAME, B.JOB_ID, B.JOB_TITLE, C.DEPARTMENT_NAME, D.CITY
FROM EMPLOYEES A, JOBS B, DEPARTMENTS C, LOCATIONS D
WHERE A.COMMISSION_PCT IS NOT NULL
AND A.JOB_ID = B.JOB_ID
AND A.DEPARTMENT_ID = C.DEPARTMENT_ID
AND C.LOCATION_ID = D.LOCATION_ID;
--16. 유럽에 소재지를 두고 있는 모든 부서아이디와 부서이름을 조회하기
SELECT DEPARTMENT_ID, DEPARTMENT_NAME
FROM DEPARTMENTS A, LOCATIONS B, COUNTRIES C, REGIONS D
WHERE D.REGION_ID = 1
AND A.LOCATION_ID = B.LOCATION_ID
AND B.COUNTRY_ID = C.COUNTRY_ID
AND C.REGION_ID = D.REGION_ID;
--17. 직원의 이름과 소속부서명, 급여, 급여 등급을 조회하기
SELECT A.FIRST_NAME, B.DEPARTMENT_NAME, A.SALARY, C.GRA
FROM EMPLOYEES A, DEPARTMENTS B, JOB_GRADES C
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
AND A.SALARY >= C.LOWEST_SAL
AND A.SALARY <= C.HIGHEST_SAL;
--18. 직원의 이름과 소속부서명, 소속부서의 관리자명을 조회하기, 소속부서가 없는 직원은 소속부서명 '없음, 관리자명 '없음'으로 표시하기
SELECT EMP.FIRST_NAME, NVL(A.DEPARTMENT_NAME,'없음'), NVL(MAN.FIRST_NAME,'없음')
FROM EMPLOYEES EMP, DEPARTMENTS A, EMPLOYEES MAN
WHERE EMP.DEPARTMENT_ID = A.DEPARTMENT_ID(+)
AND A.MANAGER_ID = MAN.EMPLOYEE_ID(+);
--19. 모든 사원의 이름, 직종아이디, 급여, 소속부서명을 조회하기
SELECT A.FIRST_NAME, A.JOB_ID, A.SALARY, B.DEPARTMENT_NAME
FROM EMPLOYEES A, DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID(+);
--20. 모든 사원의 이름, 직종아이디, 직종제목, 급여, 최소급여, 최대급여를 조회하기
SELECT A.FIRST_NAME, B.JOB_ID, B.JOB_TITLE, A.SALARY, B.MIN_SALARY, B.MAX_SALARY
FROM EMPLOYEES A, JOBS B
WHERE A.JOB_ID = B.JOB_ID;
--21. 모든 사원의 이름, 직종아이디, 직종제목, 급여, 최소급여와 본인 급여의 차이를 조회하기
SELECT A.FIRST_NAME, B.JOB_ID, B.JOB_TITLE, A.SALARY, B.MIN_SALARY,(A.SALARY-B.MIN_SALARY) AS 급여차이
FROM EMPLOYEES A, JOBS B
WHERE A.JOB_ID = B.JOB_ID;
--22. 커미션을 받는 모든 사원의 아이디, 부서이름, 소속부서의 소재지(도시명)을 조회하기
SELECT A.EMPLOYEE_ID, B.DEPARTMENT_NAME, C.CITY
FROM EMPLOYEES A, DEPARTMENTS B, LOCATIONS C
WHERE A.COMMISSION_PCT IS NOT NULL
AND A.DEPARTMENT_ID = B.DEPARTMENT_ID
AND B.LOCATION_ID = C.LOCATION_ID;
--23. 이름이 A나 a로 시작하는 모든 사원의 이름과 직종, 직종제목, 급여, 소속부서명을 조회하기
SELECT A.FIRST_NAME, B.JOB_ID, B.JOB_TITLE, A.SALARY, C.DEPARTMENT_NAME
FROM EMPLOYEES A, JOBS B, DEPARTMENTS C
WHERE (A.FIRST_NAME LIKE 'A%' OR A.FIRST_NAME LIKE 'a%')
AND A.JOB_ID = B.JOB_ID
AND A.DEPARTMENT_ID = C.DEPARTMENT_ID;
--24. 30, 60, 90번 부서에 소속되어 있는 사원들 중에서 100에게 보고하는 사원들의 이름, 직종, 급여,
--    급여등급을 조회하기
SELECT A.FIRST_NAME, A.JOB_ID, A.SALARY, B.GRA
FROM EMPLOYEES A, JOB_GRADES B
WHERE A.DEPARTMENT_ID IN (30,60,90)
AND A.MANAGER_ID = 100
AND A.SALARY >= B.LOWEST_SAL
AND A.SALARY <= B.HIGHEST_SAL;
--25. 80번 부서에 소속된 사원들의 이름, 직종, 직종제목, 급여, 최소급여, 최대급여, 급여등급, 
--    소속부서명을 조회하기
SELECT A.FIRST_NAME, B.JOB_ID, B.JOB_TITLE, A.SALARY, B.MIN_SALARY, B.MAX_SALARY, C.GRA, D.DEPARTMENT_NAME
FROM EMPLOYEES A, JOBS B, JOB_GRADES C, DEPARTMENTS D
WHERE A.DEPARTMENT_ID = 80
AND A.JOB_ID = B.JOB_ID
AND A.DEPARTMENT_ID = D.DEPARTMENT_ID
AND A.SALARY >= C.LOWEST_SAL
AND A.SALARY <= C.HIGHEST_SAL;
--26. 사원들중에서 자신의 상사보다 먼저 입사한 사원들의 이름, 입사일, 상사의 이름, 상사의 입사일을
--    조회하기
SELECT EMP.FIRST_NAME 사원이름, EMP.HIRE_DATE 사원입사일, MAN.FIRST_NAME 상사이름, MAN.HIRE_DATE 상사입사일
FROM EMPLOYEES EMP, EMPLOYEES MAN
WHERE EMP.HIRE_DATE < MAN.HIRE_DATE
AND EMP.MANAGER_ID = MAN.EMPLOYEE_ID;
--27. 부서명이 IT인 부서에 근무하는 사원들의 이름과, 직종, 급여, 급여등급, 상사의 이름과 직종을
--    조회하기
SELECT EMP.FIRST_NAME 사원이름, EMP.JOB_ID, EMP.SALARY, B.GRA, MAN.FIRST_NAME 상사이름, MAN.JOB_ID
FROM EMPLOYEES EMP, DEPARTMENTS A, JOB_GRADES B, EMPLOYEES MAN
WHERE A.DEPARTMENT_NAME = 'IT'
AND EMP.DEPARTMENT_ID = A.DEPARTMENT_ID
AND EMP.MANAGER_ID = MAN.EMPLOYEE_ID
AND EMP.SALARY >= B.LOWEST_SAL
AND EMP.SALARY <= B.HIGHEST_SAL;
--28. 'ST_CLERK'로 근무하다가 다른 직종으로 변경한 사원의 아이디, 이름, 변경전 부서명,
--     현재 직종, 현재 근무부수명을 조회하기
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, BEF.DEPARTMENT_NAME "변경전 부서", A.SALARY, AFT.DEPARTMENT_NAME "현재 근무부서"
FROM EMPLOYEES A, JOB_HISTORY B, DEPARTMENTS BEF, DEPARTMENTS AFT
WHERE B.JOB_ID = 'ST_CLERK'
AND A.EMPLOYEE_ID = B.EMPLOYEE_ID
AND A.DEPARTMENT_ID = AFT.DEPARTMENT_ID
AND B.DEPARTMENT_ID = BEF.DEPARTMENT_ID;