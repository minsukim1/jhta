package oop10;

public class Outer2 {

	/*

	 * 인스턴스 내부클래스
	 * 		외부 클래스로 외부 객체가 생성된 후 내부 클래스 설계도가 사용가능해진다.
	 * 		인스턴스 내부클래스는 외부 클래스의 모든 멤버에 접근할 수 있다.
	 * 		외부클래스의 클래스 메소드는 인스턴스 내부클래스를 사용할 수 없다.
	 * 
	 * 스태틱 내부클래스
	 * 		외부 클래스가 메모리에 로딩되어도 내부 클래스 설계도가 사용가능해진다.
	 * 		스태틱 내부클래스는 외부 클래스의 클래스 멤버만 접근할 수 있다.
	 * 		스태틱 메소드에서 사용가능한 외부클래스는 스태틱 내부클래스 뿐이다.
	 * 
	 * ----------------------------------------------------------------------------------
	 * 구분				사용가능시점			접근범위				사용불가능한 곳
	 * ----------------------------------------------------------------------------------
	 * 인스턴스			외부객체 생성 후		      외부클래스의			외부클래스의
	 * 내부클래스							      모든 구성요소			static메소드
	 * ----------------------------------------------------------------------------------
	 * 스태틱				외부클래스				외부클래스의			x
	 * 내부클래스			설계도 로딩 직후			static 구성요소
	 * ----------------------------------------------------------------------------------
	 * 로컬				해당 메소드 실행시		외부클래스의 			해당 메소드를			
	 * 내부클래스							모든 구성요소			제외한 모든 곳
	 * 											해당 메소드의 변수 중
	 * 											상수, 값이 변경되지 않는 변수
	 * ----------------------------------------------------------------------------------
	 */
	
	int x;
	static int y;
	void m1() {
		Inner2 i = new Inner2();		// 외부 클래스의 멤버 메소드에서 내부 클래스 사용가능
	}
	static void m2() {
		Inner2 i = new Inner2();		// 외부 클래스의 멤버 메소드에서 내부 클래스 사용가능
	}

	static class Inner2{
		int a;
		static int b;			// 클래스변수의 선언이 가능
		void m3() {}
		static void m4() {}		// 클래스메소드의 선언이 가능하다.
		void m5() {
//			System.out.println(x);			// 멤버변수 사용 불가능
			System.out.println(Outer2.y);
//			m1();							// 멤버메소드 사용 불가능
			Outer2.m2();
		}
	}
}
